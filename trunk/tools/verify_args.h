/** @file verify_args.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef VERIFY_ARGS_H
#define VERIFY_ARGS_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "Kche-tree library testing tool."
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "Kche-tree library testing tool."
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.4"
#endif

/** @brief Where the command line options are stored */
struct verify_args
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * train_file_arg;	/**< @brief Read the train set from a file..  */
  char * train_file_orig;	/**< @brief Read the train set from a file. original value given at command line.  */
  const char *train_file_help; /**< @brief Read the train set from a file. help description.  */
  int train_random_arg;	/**< @brief Generate a random train set of the specified size..  */
  char * train_random_orig;	/**< @brief Generate a random train set of the specified size. original value given at command line.  */
  const char *train_random_help; /**< @brief Generate a random train set of the specified size. help description.  */
  char * train_save_random_arg;	/**< @brief Save the randomly generated train set to the specified file, if provided..  */
  char * train_save_random_orig;	/**< @brief Save the randomly generated train set to the specified file, if provided. original value given at command line.  */
  const char *train_save_random_help; /**< @brief Save the randomly generated train set to the specified file, if provided. help description.  */
  char * test_file_arg;	/**< @brief Read the test set from a file..  */
  char * test_file_orig;	/**< @brief Read the test set from a file. original value given at command line.  */
  const char *test_file_help; /**< @brief Read the test set from a file. help description.  */
  int test_random_arg;	/**< @brief Generate a random test set of the specified size..  */
  char * test_random_orig;	/**< @brief Generate a random test set of the specified size. original value given at command line.  */
  const char *test_random_help; /**< @brief Generate a random test set of the specified size. help description.  */
  char * test_save_random_arg;	/**< @brief Save the randomly generated test set to the specified file, if provided..  */
  char * test_save_random_orig;	/**< @brief Save the randomly generated test set to the specified file, if provided. original value given at command line.  */
  const char *test_save_random_help; /**< @brief Save the randomly generated test set to the specified file, if provided. help description.  */
  int knn_arg;	/**< @brief Search for the K nearest neighbours. Set to 0 to disable. (default='10').  */
  char * knn_orig;	/**< @brief Search for the K nearest neighbours. Set to 0 to disable. original value given at command line.  */
  const char *knn_help; /**< @brief Search for the K nearest neighbours. Set to 0 to disable. help description.  */
  float all_in_range_arg;	/**< @brief Search for all the points within a given distance. Set to 0 to disable. (default='50').  */
  char * all_in_range_orig;	/**< @brief Search for all the points within a given distance. Set to 0 to disable. original value given at command line.  */
  const char *all_in_range_help; /**< @brief Search for all the points within a given distance. Set to 0 to disable. help description.  */
  int kdtree_io_flag;	/**< @brief Test the kd-tree I/O by saving and loading the tree to a file. (default=on).  */
  const char *kdtree_io_help; /**< @brief Test the kd-tree I/O by saving and loading the tree to a file. help description.  */
  int subscript_flag;	/**< @brief Test the kd-tree subscript operator, which makes use of the internal permutations. (default=on).  */
  const char *subscript_help; /**< @brief Test the kd-tree subscript operator, which makes use of the internal permutations. help description.  */
  int bucket_size_arg;	/**< @brief Size of the buckets containing elements at the leaf nodes of the kd-tree. (default='32').  */
  char * bucket_size_orig;	/**< @brief Size of the buckets containing elements at the leaf nodes of the kd-tree. original value given at command line.  */
  const char *bucket_size_help; /**< @brief Size of the buckets containing elements at the leaf nodes of the kd-tree. help description.  */
  float tolerance_arg;	/**< @brief Tolerance value used when comparing the distance values to the exhaustive search version. (default='1e-2').  */
  char * tolerance_orig;	/**< @brief Tolerance value used when comparing the distance values to the exhaustive search version. original value given at command line.  */
  const char *tolerance_help; /**< @brief Tolerance value used when comparing the distance values to the exhaustive search version. help description.  */
  float test_from_train_arg;	/**< @brief Set the % probability of test entries to be random elements from the train set. (default='20').  */
  char * test_from_train_orig;	/**< @brief Set the % probability of test entries to be random elements from the train set. original value given at command line.  */
  const char *test_from_train_help; /**< @brief Set the % probability of test entries to be random elements from the train set. help description.  */
  int ignore_existing_flag;	/**< @brief Ignore any existing instances in the tree of the vector being tested. (default=off).  */
  const char *ignore_existing_help; /**< @brief Ignore any existing instances in the tree of the vector being tested. help description.  */
  float epsilon_arg;	/**< @brief Distance added to the intersection calculations to approximate the results by rejecting more candidates. May raise result errors. (default='0').  */
  char * epsilon_orig;	/**< @brief Distance added to the intersection calculations to approximate the results by rejecting more candidates. May raise result errors. original value given at command line.  */
  const char *epsilon_help; /**< @brief Distance added to the intersection calculations to approximate the results by rejecting more candidates. May raise result errors. help description.  */
  float random_range_arg;	/**< @brief Set the range of the numbers to be randomly generated (from 0 to the specified value). (default='100').  */
  char * random_range_orig;	/**< @brief Set the range of the numbers to be randomly generated (from 0 to the specified value). original value given at command line.  */
  const char *random_range_help; /**< @brief Set the range of the numbers to be randomly generated (from 0 to the specified value). help description.  */
  int random_seed_arg;	/**< @brief Seed used to initialize random number generator. Allows repeatable tests..  */
  char * random_seed_orig;	/**< @brief Seed used to initialize random number generator. Allows repeatable tests. original value given at command line.  */
  const char *random_seed_help; /**< @brief Seed used to initialize random number generator. Allows repeatable tests. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int train_file_given ;	/**< @brief Whether train-file was given.  */
  unsigned int train_random_given ;	/**< @brief Whether train-random was given.  */
  unsigned int train_save_random_given ;	/**< @brief Whether train-save-random was given.  */
  unsigned int test_file_given ;	/**< @brief Whether test-file was given.  */
  unsigned int test_random_given ;	/**< @brief Whether test-random was given.  */
  unsigned int test_save_random_given ;	/**< @brief Whether test-save-random was given.  */
  unsigned int knn_given ;	/**< @brief Whether knn was given.  */
  unsigned int all_in_range_given ;	/**< @brief Whether all-in-range was given.  */
  unsigned int kdtree_io_given ;	/**< @brief Whether kdtree-io was given.  */
  unsigned int subscript_given ;	/**< @brief Whether subscript was given.  */
  unsigned int bucket_size_given ;	/**< @brief Whether bucket-size was given.  */
  unsigned int tolerance_given ;	/**< @brief Whether tolerance was given.  */
  unsigned int test_from_train_given ;	/**< @brief Whether test-from-train was given.  */
  unsigned int ignore_existing_given ;	/**< @brief Whether ignore-existing was given.  */
  unsigned int epsilon_given ;	/**< @brief Whether epsilon was given.  */
  unsigned int random_range_given ;	/**< @brief Whether random-range was given.  */
  unsigned int random_seed_given ;	/**< @brief Whether random-seed was given.  */

  int Test_set_input_group_counter; /**< @brief Counter for group Test_set_input */
  int Train_set_input_group_counter; /**< @brief Counter for group Train_set_input */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure verify_args (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure verify_args (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *verify_args_purpose;
/** @brief the usage string of the program */
extern const char *verify_args_usage;
/** @brief all the lines making the help output */
extern const char *verify_args_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct verify_args *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct verify_args *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct verify_args *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct verify_args *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct verify_args *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed verify_args structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct verify_args *args_info);
/**
 * Deallocates the string fields of the verify_args structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct verify_args *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct verify_args *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* VERIFY_ARGS_H */
